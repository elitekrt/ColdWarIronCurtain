scripted_diplomatic_actions = {

	opt_influence_start_military_subsidies = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			check_variable = { ROOT.foriegnPowerProjection > 5 }
			custom_trigger_tooltip = {
				tooltip = Influence_Action_TOP_INFLUENCER_TT
				check_variable = { influence_array^0 = ROOT }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_40_CHECK_TT
				check_variable = { influence_array_calc^0 > 0.40 }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_MIL_SUBSIDY_MONEY_CHECK_TT
				check_variable = { ROOT.SubsidiyCheck > mil_expend_subsidy }
			}
			custom_trigger_tooltip = {	#not twice
				tooltip = Influence_Action_MIL_SUBSIDY_CHECK_TT
				NOT = { has_country_flag = military_subsidized }
				NOT = {
					meta_trigger = {
						text = {
							has_country_flag = [CHECKTAG]_military_subsidizer
						}
						CHECKTAG = "[?var:influence_array^0.GetTag]"
					}
				}
			}
		}
		
		requires_acceptance = no
		cost = 50
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			ROOT = { add_to_array = { military_subsidies = PREV.id } }
			set_country_flag = military_subsidized
			add_to_variable = { ROOT.foriegnPowerProjection = -5 }
			meta_effect = {
				text = {
					set_country_flag = [ROOTTAG]_military_subsidizer
				}
				ROOTTAG = "[?var:influence_array^0.GetTag]"
			}
			set_variable = { mil_subsidy_id = ROOT.id }
			set_temp_variable = { influence_gain = 200 } #Make Dynamic Later
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
					add_to_array = { influence_array = ROOT.id }
					add_to_array = { influence_array_val = influence_gain }
			}
			recalculate_influence = yes
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = start_subsidy_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = start_subsidy_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}
	opt_influence_stop_military_subsidies = {
		allowed = {
			#always = yes
		}
		visible = {
			ROOT = {
				is_in_array = {
					array = military_subsidies
					value = PREV
				}
			}
		}
		selectable = {
			ROOT = {
				is_in_array = {
					array = military_subsidies
					value = PREV
				}
			}
		}
		
		requires_acceptance = no
		cost = 250
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			meta_effect = {
				text = {
					clr_country_flag = [ROOTTAG]_military_subsidizer
				}
				ROOTTAG = "[?var:mil_subsidy_id.GetTag]"
			}
			clr_country_flag = military_subsidized
			ROOT = { remove_from_array = { military_subsidies = PREV } }

		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = stop_subsidy_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = stop_subsidy_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}

	opt_influence_economic_exploition = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = Influence_Action_FPP_5_TT
				check_variable = { ROOT.foriegnPowerProjection > 5 }
			}
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {	
				tooltip = Influence_Action_65_INFLUENCE_TT
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.64 }
			}
				
			
			custom_trigger_tooltip = {
				tooltip = Influence_Action_EXPLOIT_CHECK_TT
				NOT = {
					meta_trigger = {
						text = {
							has_idea = [CHECKTAG]_exploit_idea
						}
						CHECKTAG = "[?var:influence_array^0.GetTag]"
					}
				}
			}
		}
		
		requires_acceptance = no
		cost = 250
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			add_to_variable = { ROOT.foriegnPowerProjection = -5 }
			meta_effect = {
				text = {
					add_ideas = [ROOTTAG]_exploit_idea
				}
				ROOTTAG = "[?var:influence_array^0.GetTag]"
			}
			
			set_temp_variable = { influence_reduce = influence_array_val^0 }
			multiply_temp_variable = { influence_reduce = 0.1 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					subtract_from_variable = { influence_array_val^v = influence_reduce }
				}
			}
			recalculate_influence = yes
			add_stability = -0.10
			#opinions
			add_opinion_modifier = {
				target = ROOT
				modifier = exploiter
			}
			every_neighbor_country = {
				add_opinion_modifier = {
					target = ROOT
					modifier = exploiter_neighbor
				}
			}		
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = economic_exploitation_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = economic_exploitation_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}
	opt_influence_pay_off_debt = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = influencer_TT
				is_influencer = yes
			}
			custom_trigger_tooltip = {
				tooltip = influence_Debt_Ratio_TT
				check_variable = { ROOT.currentMoney > currentDebt }
			}
			custom_trigger_tooltip = {
				tooltip = influence_Debt_TT
				check_variable = { currentDebt > 0 }
			}
		}
		
		requires_acceptance = no
		cost = 0
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			set_temp_variable = { influence_gain = currentDebt } #from global rank idea
			add_to_temp_variable = { influence_gain = 25 } 
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
					add_to_array = { influence_array = ROOT.id }
					add_to_array = { influence_array_val = influence_gain }
			}
			
			
			subtract_from_variable = { ROOT.currentMoney = currentDebt }
			for_each_loop = {
				array = debtPaymentArray
				index = i
				
				set_variable = { debtTotalsArray^i = 0 } 
				set_variable = { debtPaymentArray^i = 0 } 	
				set_variable = { debtOwnerArray^i = 0 }
			}
			set_variable = { currentDebtPayments = 0 }
			set_variable = { currentDebt = 0 }
			set_variable = { debtPayment = 0 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = GER }
					}
					set_variable = { influence_array_val^v = 0 }
				}
			}	
			recalculate_influence = yes
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = pay_off_debt_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = pay_off_debt_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}

	opt_influence_economic_aid = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = influencer_TT
				is_influencer = yes
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_1_TT			
				check_variable = { ROOT.foriegnPowerProjection > 1 }
			}
			NOT = { has_idea = foriegn_economic_growth }
		}
		
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			add_to_variable = { ROOT.foriegnPowerProjection = -1 }
			add_timed_idea = {
				idea = foriegn_economic_growth
				days = 365
			}
			set_temp_variable = { influence_gain = 50 } #from global rank idea
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
					add_to_array = { influence_array = ROOT.id }
					add_to_array = { influence_array_val = influence_gain }
			}
			recalculate_influence = yes
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = economic_aid_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = economic_aid_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}

	opt_influence_military_aid = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = influencer_TT
				is_influencer = yes
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_1_TT			
				check_variable = { ROOT.foriegnPowerProjection > 1 }
			}			
			NOT = { has_idea = foriegn_military_aid }
		}
		
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			add_to_variable = { ROOT.foriegnPowerProjection = -1 }
			add_timed_idea = {
				idea = foriegn_military_aid
				days = 365
			}
			set_temp_variable = { influence_gain = 50 } #from global rank idea
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
					add_to_array = { influence_array = ROOT.id }
					add_to_array = { influence_array_val = influence_gain }
			}
			recalculate_influence = yes		
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = military_aid_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = military_aid_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}

	opt_influence_mutual_defense_agreement = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = influencer_TT
				is_influencer = yes
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_5_TT
				check_variable = { ROOT.foriegnPowerProjection > 4 }
			}			
			custom_trigger_tooltip = {
				tooltip = influence_MIL_ACCESS_CHECK
				NOT = { gives_military_access_to = ROOT }
			}								
			
		}
		
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
				add_to_variable = { ROOT.foriegnPowerProjection = -5 }
				ROOT = {
					give_guarantee = PREV
				
				diplomatic_relation = {
					country = PREV
					relation = military_access
					active = yes
				}
				diplomatic_relation = {
					country = PREV
					relation = docking_rights
					active = yes
				}
				}
				set_temp_variable = { influence_gain = 25 } #from global rank idea
				for_loop_effect = {
					end = influence_array^num
					value = v
					if = {
						limit = {
							check_variable = { influence_array^v = ROOT }
						}
						add_to_variable = { influence_array_val^v = influence_gain }
						set_country_flag = found
					}
				}
				if = {
					limit = { NOT = { has_country_flag = found } }
						add_to_array = { influence_array = ROOT.id }
						add_to_array = { influence_array_val = influence_gain }
				}
				clr_country_flag = found
				recalculate_influence = yes
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = mutual_defense_treaty_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = mutual_defense_treaty_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}

	opt_influence_puppet_action = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			is_subject = no
			has_war = no
			custom_trigger_tooltip = {
				tooltip = Influence_Action_PUPPET_TT_2
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.9 }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_PUPPET_TT 
				check_variable = { ROOT.foriegnPowerProjection > 9 }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_PUPPET_TT_3
				check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct_influence_limit }
			}
		}
		
		requires_acceptance = no
		cost = 500
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			add_to_variable = { ROOT.foriegnPowerProjection = -10 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				
				meta_effect = {
					text = {
						remove_ideas = [THISTAG]_exploit_idea
					}
					THISTAG = "[?var:influence_array^v.GetTag]"
				}
			}
			set_country_flag = influence_puppet
			add_stability = -0.25
			ROOT = {
				if = {
					tag =
				}
				set_autonomy = {
					target = PREV
					autonomy_state = autonomy_easternbloc
					freedom_level = 0.5
				}
				add_threat = 10
			}
			every_neighbor_country = {
				add_opinion_modifier = {
					target = ROOT
					modifier = condemn_aggression
				}
			}	
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = puppet_influence_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = puppet_influence_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}


	opt_influence_manipulate_politics_action = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_FPP_1_TT
				check_variable = { ROOT.foriegnPowerProjection > 1 }
			}
			custom_trigger_tooltip = {
				tooltip = influence_MAJORITY_TT
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.50 }
			}
		}
		
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
				add_to_variable = { ROOT.foriegnPowerProjection = -2 }
				if = { limit = { ROOT = { has_government = conservative } } add_popularity = { ideology = conservative popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = Liberal_Conservatism } } add_popularity = { ideology = Liberal_Conservatism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = Christian_Democratic } } add_popularity = { ideology = Christian_Democratic popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = socialist } } add_popularity = { ideology = socialist popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = Social_Democratic } } add_popularity = { ideology = Social_Democratic popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = Social_Liberalism } } add_popularity = { ideology = Social_Liberalism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = democratic } } add_popularity = { ideology = democratic popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = centrist } } add_popularity = { ideology = centrist popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = liberal } } add_popularity = { ideology = liberal popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = communism } } add_popularity = { ideology = communism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = trotskyism } } add_popularity = { ideology = trotskyism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = maoism } } add_popularity = { ideology = maoism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = fascism } } add_popularity = { ideology = fascism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = nationalism } } add_popularity = { ideology = nationalism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = monarchism } }add_popularity = { ideology = monarchism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = neutrality } } add_popularity = { ideology = neutrality popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = islamism } } add_popularity = { ideology = islamism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = radical_shiaism } } add_popularity = { ideology = radical_shiaism popularity = 0.02 } }
				if = { limit = { ROOT = { has_government = Salafism } } add_popularity = { ideology = Salafism popularity = 0.02 } }
		
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = manipulate_politics_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = manipulate_politics_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}

	

	opt_influence_action = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		
		selectable = {
			NOT = { tag = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_FPP_1_TT
				check_variable = { ROOT.foriegnPowerProjection > 1 }
			}
			custom_trigger_tooltip = {
				tooltip = Influence_Action_1_TT
				OR = {
					OR = {
						check_variable = { influence_array^0 = ROOT }
						check_variable = { influence_array^1 = ROOT }
						check_variable = { influence_array^2 = ROOT }
						check_variable = { influence_array^3 = ROOT }
						check_variable = { influence_array^4 = ROOT }
						check_variable = { influence_array^5 = ROOT }
						check_variable = { influence_array^6 = ROOT }
						check_variable = { influence_array^7 = ROOT }					
					}
					OR = {
						AND = { NOT = { has_variable = influence_array^0 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^1 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^2 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^3 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^4 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^5 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^6 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
						AND = { NOT = { has_variable = influence_array^7 } check_variable = { ROOT.grossdomesticproduct > grossdomesticproduct  } }
					}
				}
			}
		}
		
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			add_to_variable = { ROOT.foriegnPowerProjection = -1 }
			set_temp_variable = { influence_gain = 50 }
			multiply_variable = { influence_gain = decryptTotal }
			
			for_loop_effect = {
				end = influence_array^num
				value = v
				if = {
					limit = {
						check_variable = { influence_array^v = ROOT }
					}
					add_to_variable = { influence_array_val^v = influence_gain }
					set_country_flag = found
				}
			}
			if = {
				limit = { NOT = { has_country_flag = found } }
					add_to_array = { influence_array = ROOT.id }
					add_to_array = { influence_array_val = influence_gain }
			}
			clr_country_flag = found
			recalculate_influence = yes
		
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = influence_target_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = influence_target_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}
	opt_influence_trade_agreement_action = {
		allowed = {
			#always = yes
		}
		visible = {
			#always = yes
		}
		selectable = {
			custom_trigger_tooltip = {
				tooltip = influence_MAJORITY_TT
				check_variable = { influence_array^0 = ROOT }
				check_variable = { influence_array_calc^0 > 0.50 }
			}
			custom_trigger_tooltip = {
				tooltip = influence_FPP_3
				check_variable = { ROOT.foriegnPowerProjection > 3 }
			}
			NOT = { is_puppet_of = ROOT }
			custom_trigger_tooltip = {
				tooltip = influence_TRADE_AGREEMENT_TT
				NOT = {
					meta_trigger = {
						text = {
							has_idea = trade_treaty_[ROOTTAG]
						}
						CHECKTAG = "[?var:influence_array^0.GetTag]"
					}
				}
			}
		}
		
		requires_acceptance = no
		cost = 100
		command_power = 0
		show_acceptance_on_action_button = no
		
		icon = 1
		
		on_sent_effect = {
		}

		# runs when the action is properly sent and accepted
		complete_effect = {
			set_temp_variable = { target = THIS.id }
			add_to_variable = { ROOT.foriegnPowerProjection -3 }
			for_loop_effect = {
				end = influence_array^num
				value = v
				meta_effect = {
					text = {
						add_ideas = trade_treaty_[ROOTTAG]
						ROOT = { add_ideas = trade_treaty_[CURRENTTAG] }
					}
					ROOTTAG = "[?var:influence_array^0.GetTag]"
					CURRENTTAG = "[?var:target]"
				}
			}		
		}

		# runs when the action is properly sent and rejected
		reject_effect = {
		}

		# SEND POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action

		can_be_sent = { # send button will be disabled if no
			#always = yes
		}
		send_description = trade_agreement_send # if there is no scripted gui, this desc will be used in send yes/no pop up


		# RECEIVE POPUP CUSTOMIZATION
		# use diplomatic_action as context in scripted gui
		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
		reset_receive_effect = {

		}
		can_be_accepted = { # accept button will be disabled if no

			always = no
		}
		receive_description = trade_agreement_receive # if there is no scripted gui, this desc will be used in send yes/no pop up

		
		# PLAYER FEEDBACK ON ACCEPT/REJECT
		 #can be overridden to customize accepted/rejected pop ups for the sender
		
		
		
	
		
		# AI

		# ai_will_do to decide if AI should send this action or not
		ai_desire = {
			base = 0

		}
	}

}
#scripted_diplomatic_actions = {
#
#	action_key = { # will be used in most localizations
#	
#		# root is the initiator of action and this is the target country
#		allowed = { #if action is valid
#			#always = yes
#		}
#		visible = { #if action is visible on gui
#			#always = yes
#		}
#		selectable = { #if action is selectable on gui
#			#always = yes
#		}
#
#		requires_acceptance = yes # if true the action will require acceptance of target country
#		cost = 10 # pp cost, can be zero
#		command_power = 10 # cp cost, can be zero
#
#		cost_string = loc_key # if you have a custom cost, use this loc to display it
#		show_acceptance_on_action_button = yes # set to no if acceptance shouldn't be displayed on the action button
#
#		icon = 1 # icon frame to use in notification
#
#       #for effects/triggers/variables, root is the sender and this is receiver
#
#		# runs when the action is sent
#		on_sent_effect = {
#		}
#
#		# runs when the action is properly sent and accepted
#		complete_effect = {
#		}
#
#		# runs when the action is properly sent and rejected
#		reject_effect = {
#		}
#
#		# SEND POPUP CUSTOMIZATION
#		# use diplomatic_action as context in scripted gui
#		# send_scripted_gui = send_scripted_gui_name # if specified, the diplomatic action will use this scripted gui before sending the request. the player (or ai) can make changes on that gui and store stuff as variable to customize action
#		reset_send_effect = { # if action has a send scripted gui, this effect will be used for clearing the state of gui (will run when player opens the scripted gui by sending the action or when ai proposes action
#			# clear action
#			if = {
#				limit = { 
#					root = {
#						is_ai = yes
#					}
#				}
#				# initialize for ai
#			}
#		}
#		can_be_sent = { # send button will be disabled if no
#			#always = yes
#		}
#		send_description = loc_key_send # if there is no scripted gui, this desc will be used in send yes/no pop up
#
#
#		# RECEIVE POPUP CUSTOMIZATION
#		# use diplomatic_action as context in scripted gui
#		# receive_scripted_gui = receive_scripted_gui_name #if specified the receiver of the action will get this scripted gui instead of yes-no popup when they receive the propose
#		reset_receive_effect = {
#			# clear action
#			if = {
#				limit = { 
#					is_ai = yes
#				}
#				# change stuff for ai
#			}
#		}
#		can_be_accepted = { # accept button will be disabled if no
#			#always = yes
#		}
#		receive_description = loc_key_receive # if there is no scripted gui, this desc will be used in send yes/no pop up
#
#		
#		# PLAYER FEEDBACK ON ACCEPT/REJECT
#		 #can be overridden to customize accepted/rejected pop ups for the sender
#		
#		
#		
#	
#		
#		# AI
#		# a list of ai_will_do entries that will be used to decide if AI should accept or reject a request
#		ai_acceptance = {
#			condition = { # name is used for loc
#				base = 100
#			}
#		}
#
#		# ai_will_do to decide if AI should send this action or not
#		ai_desire = {
#			base = -1
#			modifier = {
#				ROOT = {
#					tag = ENG
#				}
#				tag = GER
#				add = 1000
#			}
#		}
#	}
#}
